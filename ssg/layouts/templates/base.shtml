<!DOCTYPE html>
<html>
	<head id="head">
		<meta charset="utf-8">
		<meta name="viewport" content="initial-scale=1">
		<title :text="$site.title"></title>

		<link rel="preload" href="$site.asset('fonts/optimized/IBMPlexMono-Regular.woff2').link()" as="font" type="font/woff2" crossorigin>
		<link rel="preload" href="$site.asset('fonts/optimized/DepartureMono-Regular.woff2').link()" as="font" type="font/woff2" crossorigin>

		<link type="text/css" rel="stylesheet" href="$site.asset('style/style.css').link()">

		<script>
			(function() {
				const theme = localStorage.getItem('theme');
				if (theme) {
					document.documentElement.setAttribute('data-theme', theme);
					} else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.setAttribute('data-theme', 'dark');
						} else {
							document.documentElement.setAttribute('data-theme', 'light');
						}
						})();
		</script>

		<super>
	</head>
	<body id="body">
		<nav class="main-menu">
			<h1 class="site-title" :text="$site.title"></h1>
            <div>
                <a href="$site.page('').link()">Home</a>
                <a href="$site.page('design-system').link()">Design system</a>
            </div>

			<form class="theme-switcher">
                <label class="radio-input">
                    <input type="radio" name="theme" value="system">
                    System
                </label>
                <label class="radio-input">
                    <input type="radio" name="theme" value="light">
                    Light
                </label>
                <label class="radio-input">
                    <input type="radio" name="theme" value="dark">
                    Dark
                </label>
			</form>
		</nav>
		<super>

		<script>
			const form = document.querySelector('.theme-switcher');
			const html = document.documentElement;
			
			// Set initial radio state
			const savedTheme = localStorage.getItem('theme') || 'system';
			document.querySelector(`input[value="${savedTheme}"]`).checked = true;
			
			// Function to update theme with view transition
			function updateTheme(theme) {
				if (theme === 'system') {
					localStorage.removeItem('theme');
					// Apply system preference
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						html.setAttribute('data-theme', 'dark');
						} else {
							html.setAttribute('data-theme', 'light');
						}
						} else {
							localStorage.setItem('theme', theme);
							html.setAttribute('data-theme', theme);
						}
					}
					
					// Handle theme changes with view transition
					form.addEventListener('change', (e) => {
						if (e.target.name === 'theme') {
							const theme = e.target.value;
							
							// Check if View Transitions API is supported
							if (document.startViewTransition) {
								document.startViewTransition(() => updateTheme(theme));
							} else {
								updateTheme(theme);
							}
						}
					});
		</script>
	</body>
</html>
