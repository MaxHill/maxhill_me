---
import fs from 'node:fs';
import path from 'node:path';
import { codeToHtml } from 'shiki';

interface Props {
  cssPath?: string;
  jsPath?: string;
  class?: string;
  [key: string]: any;
}

const { cssPath, jsPath, class: className, ...rest } = Astro.props;

let highlightedCss: string | null = null;
let highlightedJs: string | null = null;

if (cssPath) {
  const fullCssPath = path.join(process.cwd(), 'src', cssPath);
  const cssContent = fs.readFileSync(fullCssPath, 'utf-8');
  highlightedCss = await codeToHtml(cssContent, {
    lang: 'css',
    theme: 'github-dark'
  });
}

if (jsPath) {
  const fullJsPath = path.join(process.cwd(), 'src', jsPath);
  const jsContent = fs.readFileSync(fullJsPath, 'utf-8');
  highlightedJs = await codeToHtml(jsContent, {
    lang: 'javascript',
    theme: 'github-dark'
  });
}

const mergedClass = ['component-doc', className].filter(Boolean).join(' ');
---

<div class={mergedClass} {...rest}>
  <div class="example">
    <h3>Example</h3>
    <slot />
  </div>
  
  {highlightedCss && (
    <div class="code-section">
      <h3>CSS</h3>
      <div set:html={highlightedCss} />
    </div>
  )}
  
  {highlightedJs && (
    <div class="code-section">
      <h3>JavaScript</h3>
      <div set:html={highlightedJs} />
    </div>
  )}
</div>

<style>
  .component-doc {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin: 2rem 0;
  }
  
  .example, .code-section {
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
  }
  
  h3 {
    margin-top: 0;
    margin-bottom: 1rem;
  }
  
  .code-section :global(pre) {
    margin: 0;
    border-radius: 4px;
    overflow-x: auto;
  }
</style>
