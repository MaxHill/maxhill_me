---
interface Props {
    rounded?: string | boolean;
    padded?: string | boolean;
    variant?: string;
    class?: string;
    [key: string]: any;
}

const { 
    rounded, 
    padded, 
    variant, 
    class: className,
    ...rest 
} = Astro.props;

const dataAttrs: Record<string, any> = { 
 "data-variant": "surface" 
};
const htmlAttrs: Record<string, any> = {};

if (rounded !== undefined) dataAttrs['data-rounded'] = rounded;
if (padded !== undefined) dataAttrs['data-padded'] = padded;
if (variant !== undefined) dataAttrs['data-variant'] = variant;

for (const [key, value] of Object.entries(rest)) {
    if (key.startsWith('data-')) {
        dataAttrs[key] = value;
    } else {
        htmlAttrs[key] = value;
    }
}

const hasTitle = Astro.slots.has('title');
const hasFooter = Astro.slots.has('footer');
const rowCount = 1 + (hasTitle ? 1 : 0) + (hasFooter ? 1 : 0);
---

<div class:list={["card", className]} style={`--row-count: ${rowCount}`} {...dataAttrs} {...htmlAttrs}>
    {hasTitle && (
    <div class="title">
        <slot name="title"/>
    </div>
    )}
    <div>
        <slot/>
    </div>
    {hasFooter && (
        <div class="footer">
            <slot name="footer"/>
        </div>
    )}
</div>

<style>
    .card {
        grid-template-rows: subgrid; 
        grid-row: span var(--row-count, 3);
        gap: 0;
    }
</style>
